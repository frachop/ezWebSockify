#pragma once

#ifdef __APPLE__

#	define EZWSKFY_TARGET_PLATFORM_MACOS() 1
#	define EZWSKFY_TARGET_PLATFORM_MACOS_VERSION(X) EZWSKFY_MACOSX_VERSION##X()

#elif defined(_WIN32)

#	define EZWSKFY_TARGET_PLATFORM_WINDOWS() 1

#	if !defined(EZWSKFY_TARGET_PLATFORM_WINDOWS_7)
#		define EZWSKFY_TARGET_PLATFORM_WINDOWS_7() 0
#	endif

#	define EZWSKFY_TARGET_PLATFORM_WINDOWS_VERSION(X) EZWSKFY_TARGET_PLATFORM_WINDOWS_##X()

#elif defined(__linux__)

#	define EZWSKFY_TARGET_PLATFORM_LINUX() 1

#	if !defined(EZWSKFY_TARGET_PLATFORM_LINUX_DISTRIB_DEBIAN9)
#		define EZWSKFY_TARGET_PLATFORM_LINUX_DISTRIB_DEBIAN9() 0
#	endif

#	if !defined(EZWSKFY_TARGET_PLATFORM_LINUX_DISTRIB_FEDORA5)
#		define EZWSKFY_TARGET_PLATFORM_LINUX_DISTRIB_FEDORA5() 0
#	endif

#	if !defined(EZWSKFY_TARGET_PLATFORM_LINUX_DISTRIB_CENTOS6_5)
#		define EZWSKFY_TARGET_PLATFORM_LINUX_DISTRIB_CENTOS6_5() 0
#	endif

#	if !defined(EZWSKFY_TARGET_PLATFORM_LINUX_DISTRIB_UBUNTU_14)
#		define EZWSKFY_TARGET_PLATFORM_LINUX_DISTRIB_UBUNTU_14() 0
#	endif

#	define EZWSKFY_TARGET_PLATFORM_LINUX_DISTRIB(X) EZWSKFY_TARGET_PLATFORM_LINUX_DISTRIB_##X

#	if !(EZWSKFY_TARGET_PLATFORM_LINUX_DISTRIB(DEBIAN9) || EZWSKFY_TARGET_PLATFORM_LINUX_DISTRIB(FEDORA5) || EZWSKFY_TARGET_PLATFORM_LINUX_DISTRIB(CENTOS6_5) || EZWSKFY_TARGET_PLATFORM_LINUX_DISTRIB(UBUNTU_14))
#		error invalid environment variable. EZWSKFY_TARGET_PLATFORM_LINUX_DISTRIB_<XXX> has to be DEBIAN9,FEDORA5,CENTOS6_5 or UBUNTU_14
#	endif

#endif


#if !defined(EZWSKFY_TARGET_PLATFORM_MACOS)
#	define EZWSKFY_TARGET_PLATFORM_MACOS() 0
#endif
#if !defined(EZWSKFY_TARGET_PLATFORM_WINDOWS)
#	define EZWSKFY_TARGET_PLATFORM_WINDOWS() 0
#endif
#if !defined(EZWSKFY_TARGET_PLATFORM_LINUX)
#	define EZWSKFY_TARGET_PLATFORM_LINUX() 0
#endif
#define EZWSKFY_TARGET_PLATFORM(X) EZWSKFY_TARGET_PLATFORM_##X()

#if !(EZWSKFY_TARGET_PLATFORM(MACOS) || EZWSKFY_TARGET_PLATFORM(WINDOWS) || EZWSKFY_TARGET_PLATFORM(LINUX))
#	error invalid environment variable. EZWSKFY_TARGET_PLATFORM_<XXX> has to be MACOS,WINDOWS or LINUX
#endif




#if defined(_MSC_VER)
#define DISABLE_WARNING_PUSH           __pragma(warning( push ))
#define DISABLE_WARNING_POP            __pragma(warning( pop ))
#define DISABLE_WARNING(warningNumber) __pragma(warning( disable : warningNumber ))

#define DISABLE_WARNING_UNREFERENCED_FORMAL_PARAMETER    DISABLE_WARNING(4100)
#define DISABLE_WARNING_UNREFERENCED_FUNCTION            DISABLE_WARNING(4505)
#define DISABLE_WARNING_MISSING_BRACES                   
// other warnings you want to deactivate...

#elif defined(__GNUC__) || defined(__clang__)
#define DO_PRAGMA(X) _Pragma(#X)
#define DISABLE_WARNING_PUSH           DO_PRAGMA(GCC diagnostic push)
#define DISABLE_WARNING_POP            DO_PRAGMA(GCC diagnostic pop)
#define DISABLE_WARNING(warningName)   DO_PRAGMA(GCC diagnostic ignored #warningName)

#define DISABLE_WARNING_UNREFERENCED_FORMAL_PARAMETER    DISABLE_WARNING(-Wunused-parameter)
#define DISABLE_WARNING_UNREFERENCED_FUNCTION            DISABLE_WARNING(-Wunused-function)
#define DISABLE_WARNING_MISSING_BRACES                   DISABLE_WARNING(-Wmissing-braces)
// other warnings you want to deactivate...

#else
#define DISABLE_WARNING_PUSH
#define DISABLE_WARNING_POP
#define DISABLE_WARNING_UNREFERENCED_FORMAL_PARAMETER
#define DISABLE_WARNING_UNREFERENCED_FUNCTION
// other warnings you want to deactivate...

#endif



